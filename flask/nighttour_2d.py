# -*- coding: utf-8 -*-
"""NightTour_2d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IgWFPUrJuji0-8xkVMGE6TCJJyZOJWn7
"""

import numpy as np
import math
!pip install amplify
from amplify import VariableGenerator, equal_to, sum_poly, FixstarsClient, solve
from datetime import timedelta

NUM_BOARD = 64  # 盤面のマス総数
sqrt_NUM_BOARD = int(math.sqrt(NUM_BOARD))
constraints = 0
gen = VariableGenerator()
q = gen.array("Binary", shape=(NUM_BOARD, sqrt_NUM_BOARD, sqrt_NUM_BOARD))

# 制約1: 各手で1マスだけ指す
for n in range(NUM_BOARD):
    constraints += equal_to(sum_poly([q[n, i, j] for i in range(sqrt_NUM_BOARD) for j in range(sqrt_NUM_BOARD)]), 1)

# 制約2: 各マスは1回だけ指す
for i in range(sqrt_NUM_BOARD):
    for j in range(sqrt_NUM_BOARD):
        constraints += equal_to(sum_poly([q[n, i, j] for n in range(NUM_BOARD)]), 1)

# 制約3：n手までに指した手
# constraints += equal_to(q[0, 0, 0] + q[1, 2, 1] + q[2, 1, 3] + q[3, 3, 2] + q[4, 4, 0], 5)

d_moves = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]]

# ナイトの移動を促進する目的関数
objective = 0
for n in range(NUM_BOARD - 1):
    legal_moves = 0
    for i in range(sqrt_NUM_BOARD):
        for j in range(sqrt_NUM_BOARD):
            for d in d_moves:
                ni, nj = i + d[0], j + d[1]
                if 0 <= ni < sqrt_NUM_BOARD and 0 <= nj < sqrt_NUM_BOARD:
                    legal_moves += q[n, i, j] * q[n+1, ni, nj]
    objective += legal_moves

from amplify import Model
objective = - objective # 目的関数は最大化
for i in range(sqrt_NUM_BOARD):
    for j in range(sqrt_NUM_BOARD):
      constraints_neo = constraints + equal_to(q[0, i, j], 1)
      model = constraints_neo + objective
      client = FixstarsClient()
      client.token = "AE/TZldOOkEItyFW5PFYBhSoDUEcx6KL0Xn"  # トークンを入力
      client.parameters.timeout = timedelta(milliseconds=30 * 1000)  # タイムアウトを30秒（8×8のとき)
      # client.parameters.timeout = timedelta(milliseconds=100 * 1000)  # タイムアウトを100秒（10×10のとき)　100秒では約1手くらい不正な移動がある
      result = solve(model, client)

      # 結果の取得と表示
      best_solution = result.best.values
      q_values = q.evaluate(best_solution)

      # 結果の可視化
      knight_tour = np.zeros((sqrt_NUM_BOARD, sqrt_NUM_BOARD), dtype=int)
      for n in range(NUM_BOARD):
          for k in range(sqrt_NUM_BOARD):
              for l in range(sqrt_NUM_BOARD):
                  if q_values[n, k, l] == 1:
                      knight_tour[k, l] = n + 1  # ステップ番号を1から始める



      # 経路が実際にナイトの動きで可能か検証
      valid_tour = True
      positions = []
      for n in range(NUM_BOARD):
          pos = None
          for k in range(sqrt_NUM_BOARD):
              for l in range(sqrt_NUM_BOARD):
                  if q_values[n, k, l] == 1:
                      pos = (k, l)
                      break
              if pos:
                  break
          positions.append(pos)

      for m in range(NUM_BOARD - 1):
          x1, y1 = positions[m]
          x2, y2 = positions[m + 1]
          dx, dy = abs(x2 - x1), abs(y2 - y1)
          if not ((dx == 1 and dy == 2) or (dx == 2 and dy == 1)):
              valid_tour = False

      if not valid_tour:
        print(f"{i}行{j}列からのナイト・ツアー")





# 結果の取得と表示
best_solution = result.best.values
q_values = q.evaluate(best_solution)

# 結果の可視化
knight_tour = np.zeros((sqrt_NUM_BOARD, sqrt_NUM_BOARD), dtype=int)
for n in range(NUM_BOARD):
    for i in range(sqrt_NUM_BOARD):
        for j in range(sqrt_NUM_BOARD):
            if q_values[n, i, j] == 1:
                knight_tour[i, j] = n + 1  # ステップ番号を1から始める

print("ナイトツアーの経路:")
print(knight_tour)

# 経路が実際にナイトの動きで可能か検証
valid_tour = True
positions = []
for n in range(NUM_BOARD):
    pos = None
    for i in range(sqrt_NUM_BOARD):
        for j in range(sqrt_NUM_BOARD):
            if q_values[n, i, j] == 1:
                pos = (i, j)
                break
        if pos:
            break
    positions.append(pos)

for i in range(NUM_BOARD - 1):
    x1, y1 = positions[i]
    x2, y2 = positions[i + 1]
    dx, dy = abs(x2 - x1), abs(y2 - y1)
    if not ((dx == 1 and dy == 2) or (dx == 2 and dy == 1)):
        print(f"警告: ステップ {i+1} から {i+2} への移動が不正です: ({x1},{y1}) → ({x2},{y2})")
        valid_tour = False

if valid_tour:
    print("検証結果: すべての移動が正しいナイトの動きです。")
else:
    print("検証結果: 一部の移動がナイトの動きとして不正です。")